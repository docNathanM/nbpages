import os
import sys
import datetime
import shutil
import configparser


# default templates
index_md_tpl = """
[//]: # (DO NOT EDIT. index.md is generated by nbpages. Make changes to templates/index.md.tpl.)
# {{ page_title }}

{% for line in readme_toc -%}
{{ line }}
{% endfor %}

"""

notebook_header_tpl = """
*This notebook contains material from [{{ page_title }}]({{ page_url }});
content is available [on Github]({{ github_url }}).*

"""

notebook_tpl = """
<!-- jinja2 template extends `full` to include cell tags in the html rendering of notebooks -->
{% extends 'full.tpl'%}
{% block any_cell %}
{% if cell['metadata'].get('tags', []) %}
    <div style="background-color:white; border:thin solid grey; margin-left:95px; margin-right:6px">
    {% for tag in cell['metadata'].get('tags', []) %}
        &nbsp; <a href="https://{github_user_name}.github.io/{github_repo_name}/tag_index.html#{{ tag }}">{{ tag }}</a>
    {% endfor %}
    </div>
    {% if 'home-activity' in cell['metadata'].get('tags', []) %}
        <div style="background-color: rgba(0,255,0,0.05) ; padding: 10px; margin-left:95px; margin-right:6px; border: 1px solid darkgreen;"> <b>Home Activity</b>: {{ super() }} </div>
    {% elif 'class-activity' in cell['metadata'].get('tags', []) %}
        <div style="background-color: rgba(0,0,255,0.05) ; padding: 10px; margin-left:95px; margin-right:6px; border: 1px solid darkgreen;"> <b>Class Activity</b>: {{ super() }} </div>
    {% elif 'important-note' in cell['metadata'].get('tags', []) %}
        <div style="background-color: rgba(255,0,0,0.05) ; padding: 10px; margin-left:95px; margin-right:6px; border: 1px solid darkgreen;"> <b>Important Note</b>: {{ super() }} </div>
    {% else %}
        {{ super () }}
    {% endif %}
{% else %}
    {{ super() }}
{% endif %}
{% endblock any_cell %}

"""


def make_dir_if_needed(path):
    """Create new directory if not present."""
    if not os.path.exists(path):
        os.mkdir(path)
    else:
        print(f"- {path} directory already exists")
    return

def create_backup(path):
    """Create backup file with date and time stamp. Return path to backup."""
    backup_path = ""
    if os.path.isfile(path):
        backup_path = path + datetime.datetime.now().strftime(".backup-%Y-%m-%d-%H%M%S")
        print(f"- backing up {path} to {backup_path}")
        shutil.copy2(path, backup_path)
    return backup_path

def write_content(path, content):
    """Write string content to path name."""
    print(f"- writing {path}")
    with open(path, 'w') as file:
        file.write(content)
    return path

def compare_and_remove_backup(path, backup_path):
    """Compare path to backup path, remove backup path if redundant."""
    assert path and os.path.isfile(path), f"{path} not found"
    if  backup_path and os.path.isfile(backup_path):
        if open(path).read() == open(backup_path).read():
            print(f"- {path} unchanged, {backup_path} deleted.")
            os.remove(backup_path)

def write_with_backup(directory, filename, content):
    """Backup, write, and delete backup if there are no changes."""
    path = os.path.join(directory, filename)
    confirm = lambda: input(f"- {path} will be overwritten by new content. Proceed [y/n]? ").lower() in ['y', 'yes']
    if not os.path.isfile(path) or (content != open(path).read() and confirm()):
        backup_path = create_backup(path)
        write_content(path, content)
        compare_and_remove_backup(path,  backup_path)
    else:
        print(f"- {path} not overwritten.")

def nbsetup(config_file="nbpages.cfg"):
    """Setup directories if needed with default configuration and templates."""

    print(f"creating {config_file}")
    # verify a .git repository has been established
    print(f"- reading configuration information from .git/config")
    assert os.path.exists('.git'), ".git subdirectory not found. "
    git_config = configparser.ConfigParser(strict=False)
    git_config.read(os.path.join(".git", "config"))
    github_repo_url = git_config['remote "origin"']['url']
    github_user_name = github_repo_url.split(':')[-1].rsplit('/')[-2]
    github_repo_name = github_repo_url.rsplit('/')[-1].split('.')[0]
    github_pages_url = f"https://{github_user_name}.github.io/{github_repo_name}"

    nbpages = { "github_repo_url": github_repo_url,
                "github_user_name": github_user_name,
                "github_repo_name": github_repo_name,
                "github_pages_url": github_pages_url,
                "templates_dir": "templates",
                "src_dir": "notebooks",
                "dst_dir": "docs",
                "figures_subdir": "figures",
                "data_subdir": "data",
                }

    # write configuration info to config file
    config = configparser.ConfigParser()
    config["nbpages"] = nbpages
    config_file_backup = create_backup(config_file)
    with open(config_file, "w") as f:
        print(f"- writing {config_file}")
        config.write(f)
    compare_and_remove_backup(config_file, config_file_backup)

    # create directories if needed
    print(f"creating templates directory")
    make_dir_if_needed(nbpages["templates_dir"])
    write_with_backup(nbpages["templates_dir"], 'notebook_header.tpl', notebook_header_tpl)
    write_with_backup(nbpages["templates_dir"], 'index.md.tpl', index_md_tpl)
    write_with_backup(nbpages["templates_dir"], 'notebook.tpl', notebook_tpl)

    print(f"creating source directory")
    make_dir_if_needed(nbpages["src_dir"])
    make_dir_if_needed(os.path.join(nbpages["src_dir"], nbpages["figures_subdir"]))
    make_dir_if_needed(os.path.join(nbpages["src_dir"], nbpages["data_subdir"]))

    print(f"creating destination directory")
    make_dir_if_needed(nbpages["dst_dir"])
    make_dir_if_needed(os.path.join(nbpages["dst_dir"], nbpages["figures_subdir"]))
    make_dir_if_needed(os.path.join(nbpages["dst_dir"], nbpages["data_subdir"]))

    # create an initial index.md if none exists
    if "index.md" not in os.listdir(nbpages["dst_dir"]):
        write_content(os.path.join(nbpages["dst_dir"], "index.md"), f"# {github_repo_name}\n")

    return 0


if __name__ == "__main__":
    sys.exit(nbsetup())
