import os
import sys
import datetime
import shutil
import configparser

index_md_tpl = """
[//]: # (DO NOT EDIT. index.md is generated by nbpages. Make changes to templates/index.md.tpl.)
# {{ page_title }}

{% for line in readme_toc -%}
{{ line }}
{% endfor %}

"""

notebook_header_tpl = """
*This notebook contains material from [{{ page_title }}]({{ page_url }});
content is available [on Github]({{ github_url }}).*

"""

notebook_tpl = """
<!-- jinja2 template extends `full` to include cell tags in the html rendering of notebooks -->
{% extends 'full.tpl'%}
{% block any_cell %}
{% if cell['metadata'].get('tags', []) %}
    <div style="background-color:white; border:thin solid grey; margin-left:95px; margin-right:6px">
    {% for tag in cell['metadata'].get('tags', []) %}
        &nbsp; <a href="https://{github_user_name}.github.io/{github_repo_name}/tag_index.html#{{ tag }}">{{ tag }}</a>
    {% endfor %}
    </div>
    {% if 'home-activity' in cell['metadata'].get('tags', []) %}
        <div style="background-color: rgba(0,255,0,0.05) ; padding: 10px; margin-left:95px; margin-right:6px; border: 1px solid darkgreen;"> <b>Home Activity</b>: {{ super() }} </div>
    {% elif 'class-activity' in cell['metadata'].get('tags', []) %}
        <div style="background-color: rgba(0,0,255,0.05) ; padding: 10px; margin-left:95px; margin-right:6px; border: 1px solid darkgreen;"> <b>Class Activity</b>: {{ super() }} </div>
    {% elif 'important-note' in cell['metadata'].get('tags', []) %}
        <div style="background-color: rgba(255,0,0,0.05) ; padding: 10px; margin-left:95px; margin-right:6px; border: 1px solid darkgreen;"> <b>Important Note</b>: {{ super() }} </div>
    {% else %}
        {{ super () }}
    {% endif %}
{% else %}
    {{ super() }}
{% endif %}
{% endblock any_cell %}

"""


def make_dir_if_needed(path):
    """Create new directory if not present."""
    if not os.path.exists(path):
        os.mkdir(path)
    else:
        print(f"- {path} directory already exists")

def write_template_if_needed(dir, filename, content):
    """Create template file if needed, and verify that it exists."""
    path = os.path.join(dir, filename)
    if not os.path.isfile(path):
        print(f"- writing {path}")
        with open(path, 'w') as file:
            file.write(content)
    else:
        if content == open(path).read():
            print(f"- {path} exists and no update required.")
        else:
            print(f"- {path} changed since last setup.")
            backup_path = path + datetime.datetime.now().strftime(".backup-%Y-%m-%d-%H-%M-%S")
            print(f"- backing up {path} to {backup_path}")
            shutil.copy2(path, backup_path)
            print(f"- writing {path}")
            with open(path, 'w') as file:
                file.write(content)

def nbsetup(config_file="nbpages.cfg"):
    """Setup directories if needed with default configuration and templates."""

    print(f"creating {config_file}")
    # verify a .git repository has been established
    print(f"- reading configuration information from .git/config")
    assert os.path.exists('.git'), ".git subdirectory not found. "
    git_config = configparser.ConfigParser(strict=False)
    git_config.read(os.path.join(".git", "config"))
    github_repo_url = git_config['remote "origin"']['url']
    github_user_name = github_repo_url.split(':')[-1].rsplit('/')[-2]
    github_repo_name = github_repo_url.rsplit('/')[-1].split('.')[0]
    github_pages_url = f"https://{github_user_name}.github.io/{github_repo_name}"

    nbpages = { "github_repo_url": github_repo_url,
                "github_user_name": github_user_name,
                "github_repo_name": github_repo_name,
                "github_pages_url": github_pages_url,
                "templates_dir": "templates",
                "src_dir": "notebooks",
                "dst_dir": "docs",
                "figures_subdir": "figures",
                "data_subdir": "data",
                }

    if os.path.isfile(config_file):
        config_file_backup = config_file + datetime.datetime.now().strftime(".backup-%Y-%m-%d-%H-%M-%S")
        print(f"- backing up existing {config_file} to {config_file_backup}")
        shutil.copy2(config_file, config_file_backup)

    print(f"- writing {config_file}")
    config = configparser.ConfigParser()
    config["nbpages"] = nbpages
    with open(config_file, "w") as f:
        config.write(f)

    # create directories if needed
    print(f"creating templates directory")
    make_dir_if_needed(nbpages["templates_dir"])
    write_template_if_needed(nbpages["templates_dir"], 'notebook_header.tpl', notebook_header_tpl)
    write_template_if_needed(nbpages["templates_dir"], 'index.md.tpl', index_md_tpl)
    write_template_if_needed(nbpages["templates_dir"], 'notebook.tpl', notebook_tpl)

    print(f"creating source directory")
    make_dir_if_needed(nbpages["src_dir"])
    make_dir_if_needed(os.path.join(nbpages["src_dir"], nbpages["figures_subdir"]))
    make_dir_if_needed(os.path.join(nbpages["src_dir"], nbpages["data_subdir"]))

    print(f"creating destination directory")
    make_dir_if_needed(nbpages["dst_dir"])
    make_dir_if_needed(os.path.join(nbpages["dst_dir"], nbpages["figures_subdir"]))
    make_dir_if_needed(os.path.join(nbpages["dst_dir"], nbpages["data_subdir"]))

    # create an initial index.md if none exists
    if "index.md" not in os.listdir(nbpages["dst_dir"]):
        print("- writing index.md to {0}".format(nbpages["dst_dir"]))
        with open(os.path.join(nbpages["dst_dir"], "index.md"), "w") as f:
            f.write(f"# {github_repo_name}\n")

    return 0


if __name__ == "__main__":
    sys.exit(nbsetup())
